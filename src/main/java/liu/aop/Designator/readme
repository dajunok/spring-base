一、案例说明：切点（Poincut）表达式中各种指示器（Designator）灵活运用。指示器也被称为切点表达式函数。
	1、案例在切点（Poincut）表达式中采用了execution()、args()、@args()、this()、target()、@target、
	  within()、@within()、@annotation和bean()。等等指示器。
	2、案例在切点（Poincut）表达式中还综合的运用了表达式运算符：&& || !  分别对应与操作（and)、或操作（or)、非操作（not）。
二、源代码文件（.java）介绍：
三、知识点：
	1、execution()：是使用的最多的一种Pointcut表达式函数，表示某个方法的执行，其标准语法如下：	
		execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)
		
		【modifiers-pattern?】：访问修饰符。如：public、private、protected和static等。支持通配符*号，表示任意访问修饰符。
		【ret-type-pattern】：返回值类型。支持通配符*号，表示任意返回类型。
		【declaring-type-pattern?】：包名+类名称，如：liu.aop.Advice.AdviceManager 其中AdviceManager是类名。支持通配符*号，表示任意包名下的任何类中的某个方法。
		【name-pattern(param-pattern)】：方法名称与参数。(..)代表任意数量的参数；()代表没有参数。
		【throws-pattern?】异常类型。如：throws Exception 匹配所有抛出Exception的方法
		【?】：代表空格，用空格分隔它们。
	2、args()：用于匹配目标方法参数。
		● args()匹配任何不带参数的方法。
		● args(java.lang.String)匹配任何只带一个参数，而且这个参数的类型是String的方法。
		● args(..)带任意参数的方法。
		● args(java.lang.String,..)匹配带任意个参数，但是第一个参数的类型是String的方法
		● args(..,java.lang.String)匹配带任意个参数，但是最后一个参数的类型是String的方法。
	3、@args():匹配被调用的方法上含有参数，且对应的参数类型上拥有指定的注解的情况（注意不是参数前面的注解，而是参数类型对应的类定义上面。）
		● @args(com.elim.spring.support.MyAnnotation)匹配方法参数类型上拥有MyAnnotation注解的方法调用。
			如我们有一个方法add(MyParam param)接收一个MyParam类型的参数，而MyParam这个类是拥有注解MyAnnotation的，
			则它可以被匹配上。
	4、target()：Spring Aop是基于代理的，target则表示被代理的目标bean。当被代理的目标bean可以被转换为指定的类型时则表示匹配。
		● target(com.elim.spring.aop.service.IUserService)则匹配所有被代理的目标对象能够转换为IUserService类型的所有方法的外部调用。
	5、@target()：匹配目标bean对应的类型及其父类型上拥有指定的注解。
		● @target(com.elim.spring.support.MyAnnotation)匹配被代理的目标bean对应的类型上拥有MyAnnotation注解。
	6、within()：是用来指定目标Bean类型的，指定类型中的所有方法将被拦截。
		● within(com.elim.spring.aop.service.UserServiceImpl)匹配UserServiceImpl类对应bean的所有方法外部调用，
		     而且这个对象只能是UserServiceImpl类型，不能是其子类型。
		● within(com.elim..*)匹配com.elim包及其子包下面所有的类的所有方法的外部调用。
	7、@within()：用于匹配被代理的目标Bean对应的类型或其父类型拥有指定的注解的情况，但只有在调用拥有指定注解的类上的方法时才匹配。
		● @within(com.elim.spring.support.MyAnnotation)”匹配被调用的方法声明的类上拥有MyAnnotation注解的情况。
		      比如有一个ClassA上使用了注解MyAnnotation标注，并且定义了一个方法a()，那么在调用ClassA.a()方法时将匹配该Pointcut；
		      如果有一个ClassB上没有MyAnnotation注解，但是它继承自ClassA，同时它上面定义了一个方法b()，那么在调用ClassB().b()方法时
		      不会匹配该Pointcut，但是在调用ClassB().a()时将匹配该方法调用，因为a()是定义在父类型ClassA上的，
		      且ClassA上使用了MyAnnotation注解。但是如果子类ClassB覆写了父类ClassA的a()方法，则调用ClassB.a()方法时也不匹配该Pointcut。
	8、@annotation()：用于匹配方法上面拥有指定注解的情况。
		● @annotation(com.elim.spring.support.MyAnnotation)”匹配所有的方法上拥有MyAnnotation注解的方法外部调用。
	9、bean()：用于匹配当调用的是指定的Spring的某个bean的方法时。
		● bean(abc)匹配Spring Bean容器中id或name为abc的bean的方法调用。
		● bean(user*)匹配所有id或name为以user开头的bean的方法调用。
	10、this()：Spring Aop是基于代理的，this就表示代理对象。this类型的Pointcut表达式的语法是this(type)，
	          当生成的代理对象可以转换为type指定的类型时则表示匹配。基于JDK接口的代理和基于CGLIB的代理生成的代理对象是不一样的。
		● this(com.elim.spring.aop.service.IUserService)匹配生成的代理对象是IUserService类型的所有方法的外部调用。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	