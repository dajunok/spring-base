一、案例说明：
	Spring表达式语言（Spring Expression Language， SpEL ）的灵活运用。
	1、使用bean的ID来引用bean；
	2、调用方法和访问对象的属性；
	3、对值进行算术、 关系和逻辑运算；
	4、正则表达式匹配；
	5、集合操作。
二、源代码文件（.java）介绍：
	【BasicData.java】：POJO,基础数据。
	【Book.java】：POJO，书籍。
	【SpringExpressionLanguage.java】：POJO，spring表达式语言测试类。
	【SpringRef.java】POJO，spring表达式引用测试类。
	
	【JavaConfig.java】：配置类。主要用于定义Bean。
		1、该类使用了@Configuration注解，表明它是一个配置类。
		2、该类使用了@Bean注解，用于定义bean。
		3、该类使用了@Autowired注解，用来注入依赖bean。
		4、该类使用了@Qualifier注解，用于指定义特定bean，以免@Autowired注解注入时产生歧义。
		5、该类使用了@Value("#{XXX}") 注解，用于解析Spring表达式语言。注意与占位符中用到的 @Value("${XXX}") 进行区别。
	
	【spring-Book.xml】：XML配置文件,主要用于定义Bean。
		1、该配置文件采用Constructor构造器注入方式装配bean。
		2、该配置文件使用了c命名空间。
		3、该配置文件采用了Spring表达式语言#{}读取bean对象或属性值，以及其他数据。
	【spring-SpEL.xml】：
		1、该配置文件采用settor注入方式装配bean。
		2、该配置文件使用了p命名空间。
		3、该配置文件使用了<list>标签注入bean对象列表。
		4、、该配置文件使用了<map>标签。
		5、该配置文件采用了Spring表达式语言#{}读取bean对象<list>标签、<map>标签、<array>标签属性值，以及其他数据。
	
	【Test.java】：案例调试类。
		1、使用ClassPathXmlApplicationContext类获取XML资源配置文件。
		2、使用AnnotationConfigApplicationContext类获取JavaConfig配置类。
三、知识点：
	1、Spring表达式语言（简称SpEL）：
	 	是一个支持查询并在运行时操纵一个对象图的功能强大的表达式语言。SpEL语言的语法类似于统一EL，但提供了更多的功能，
	 	最主要的是显式方法调用和基本字符串模板函数。同很多可用的Java 表达式语言相比，例如OGNL，MVEL和JBoss EL，SpEL的诞生
	 	是为了给Spring社区提供一个可以给Spring目录中所有产品提供单一良好支持的表达式语言。其语言特性由Spring目录中的项目需求驱动，
	 	包括基于eclipse的SpringSource套件中的代码补全工具需求。也就是说，SpEL是一个基于技术中立的API允许需要时与其他表达式语言集成。
		SpEL作为Spring目录中表达式求值的基础，它并不是直接依赖于Spring而是可以被独立使用。为了能够自包含，案例中的许多示例
		把SpEL作为一个独立的表达式语言来使用。这就需要创建一些如解析器的引导基础组件类。大多数Spring用户只需要为求值编写表达式
		字符串而不需要关心这些基础组件。
	2、SpEL功能特性：
		 字符表达式
		 布尔和关系操作符
		 正则表达式
		 类表达式
		 访问properties，arrays，lists，maps
		 方法调用
		 关系操作符
		 赋值
		 调用构造器
		 三元操作符
		 变量
		 用户自定义函数
		 集合投影
		 集合选择
		 模板表达式
		
